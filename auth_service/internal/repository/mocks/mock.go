// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "auth_service/internal/model"
	repository "auth_service/internal/repository"
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDBAuthenticateRepos is a mock of DBAuthenticateRepos interface.
type MockDBAuthenticateRepos struct {
	ctrl     *gomock.Controller
	recorder *MockDBAuthenticateReposMockRecorder
}

// MockDBAuthenticateReposMockRecorder is the mock recorder for MockDBAuthenticateRepos.
type MockDBAuthenticateReposMockRecorder struct {
	mock *MockDBAuthenticateRepos
}

// NewMockDBAuthenticateRepos creates a new mock instance.
func NewMockDBAuthenticateRepos(ctrl *gomock.Controller) *MockDBAuthenticateRepos {
	mock := &MockDBAuthenticateRepos{ctrl: ctrl}
	mock.recorder = &MockDBAuthenticateReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBAuthenticateRepos) EXPECT() *MockDBAuthenticateReposMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDBAuthenticateRepos) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBAuthenticateReposMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBAuthenticateRepos)(nil).BeginTx), ctx)
}

// CommitTx mocks base method.
func (m *MockDBAuthenticateRepos) CommitTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockDBAuthenticateReposMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockDBAuthenticateRepos)(nil).CommitTx), ctx, tx)
}

// CreateUser mocks base method.
func (m *MockDBAuthenticateRepos) CreateUser(ctx context.Context, user *model.Person) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBAuthenticateReposMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBAuthenticateRepos)(nil).CreateUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockDBAuthenticateRepos) GetUser(ctx context.Context, useremail, password string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, useremail, password)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBAuthenticateReposMockRecorder) GetUser(ctx, useremail, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBAuthenticateRepos)(nil).GetUser), ctx, useremail, password)
}

// RollbackTx mocks base method.
func (m *MockDBAuthenticateRepos) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockDBAuthenticateReposMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDBAuthenticateRepos)(nil).RollbackTx), ctx, tx)
}

// MockRedisSessionRepos is a mock of RedisSessionRepos interface.
type MockRedisSessionRepos struct {
	ctrl     *gomock.Controller
	recorder *MockRedisSessionReposMockRecorder
}

// MockRedisSessionReposMockRecorder is the mock recorder for MockRedisSessionRepos.
type MockRedisSessionReposMockRecorder struct {
	mock *MockRedisSessionRepos
}

// NewMockRedisSessionRepos creates a new mock instance.
func NewMockRedisSessionRepos(ctrl *gomock.Controller) *MockRedisSessionRepos {
	mock := &MockRedisSessionRepos{ctrl: ctrl}
	mock.recorder = &MockRedisSessionReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisSessionRepos) EXPECT() *MockRedisSessionReposMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockRedisSessionRepos) GetSession(ctx context.Context, sessionID string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockRedisSessionReposMockRecorder) GetSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockRedisSessionRepos)(nil).GetSession), ctx, sessionID)
}

// SetSession mocks base method.
func (m *MockRedisSessionRepos) SetSession(ctx context.Context, session model.Session, expiration time.Duration) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, session, expiration)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockRedisSessionReposMockRecorder) SetSession(ctx, session, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockRedisSessionRepos)(nil).SetSession), ctx, session, expiration)
}
