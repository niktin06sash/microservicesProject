// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "auth_service/internal/model"
	service "auth_service/internal/service"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthentication is a mock of UserAuthentication interface.
type MockUserAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthenticationMockRecorder
}

// MockUserAuthenticationMockRecorder is the mock recorder for MockUserAuthentication.
type MockUserAuthenticationMockRecorder struct {
	mock *MockUserAuthentication
}

// NewMockUserAuthentication creates a new mock instance.
func NewMockUserAuthentication(ctrl *gomock.Controller) *MockUserAuthentication {
	mock := &MockUserAuthentication{ctrl: ctrl}
	mock.recorder = &MockUserAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthentication) EXPECT() *MockUserAuthenticationMockRecorder {
	return m.recorder
}

// AuthenticateAndLogin mocks base method.
func (m *MockUserAuthentication) AuthenticateAndLogin(user *model.Person, ctx context.Context) *service.ServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateAndLogin", user, ctx)
	ret0, _ := ret[0].(*service.ServiceResponse)
	return ret0
}

// AuthenticateAndLogin indicates an expected call of AuthenticateAndLogin.
func (mr *MockUserAuthenticationMockRecorder) AuthenticateAndLogin(user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateAndLogin", reflect.TypeOf((*MockUserAuthentication)(nil).AuthenticateAndLogin), user, ctx)
}

// Authorization mocks base method.
func (m *MockUserAuthentication) Authorization(ctx context.Context, sessionID string) *service.ServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", ctx, sessionID)
	ret0, _ := ret[0].(*service.ServiceResponse)
	return ret0
}

// Authorization indicates an expected call of Authorization.
func (mr *MockUserAuthenticationMockRecorder) Authorization(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockUserAuthentication)(nil).Authorization), ctx, sessionID)
}

// RegistrateAndLogin mocks base method.
func (m *MockUserAuthentication) RegistrateAndLogin(user *model.Person, ctx context.Context) *service.ServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrateAndLogin", user, ctx)
	ret0, _ := ret[0].(*service.ServiceResponse)
	return ret0
}

// RegistrateAndLogin indicates an expected call of RegistrateAndLogin.
func (mr *MockUserAuthenticationMockRecorder) RegistrateAndLogin(user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrateAndLogin", reflect.TypeOf((*MockUserAuthentication)(nil).RegistrateAndLogin), user, ctx)
}
